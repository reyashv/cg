import cv2
import numpy as np
#sampling
image = cv2.imread("car.jfif")
n=2
sampled_image = cv2.resize(image, (image.shape[1] // n, image.shape[0] // n))
cv2.imwrite("sampled_image.jpg", sampled_image)

#quantization
color_image = cv2.imread('pic.jfif')
gray_image = cv2.cvtColor(color_image, cv2.COLOR_BGR2GRAY)
cv2.imshow('gray_image',color_image)

#resize
resizeImg = cv2.resize(image, (200, 200))
cv2.imshow("Resized Image", resizeImg)

#convert to hsv and get specific color images
hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
# to extract green
green = np.uint8([[[0, 255, 0]]])
hsvGreen = cv2.cvtColor(green, cv2.COLOR_BGR2HSV)
hueGreen = hsvGreen[0][0][0]
lowerGreen = np.array([hueGreen - 10, 100, 100])
upperGreen = np.array([hueGreen + 10, 255, 255]) 
maskGreen = cv2.inRange(hsv, lowerGreen, upperGreen)

# to extract blue
blue = np.uint8([[[255, 0, 0]]])
hsvBlue = cv2.cvtColor(blue, cv2.COLOR_BGR2HSV)
hueBlue = hsvBlue[0][0][0]
lowerBlue = np.array([hueBlue - 10, 100, 100])
upperBlue = np.array([hueBlue + 10, 255, 255])
maskBlue = cv2.inRange(hsv, lowerBlue, upperBlue)

mask = maskGreen + maskBlue
res = cv2.bitwise_and(image, image, mask=mask)

cv2.imshow("Masked", mask)
cv2.waitKey(0)
cv2.destroyAllWindows()


#filters
import cv2
import numpy as np
image = cv2.imread("car.jfif", cv2.IMREAD_GRAYSCALE)
kernel_size = 5  
max_filtered = cv2.dilate(image, np.ones((kernel_size, kernel_size), np.uint8))
min_filtered = cv2.erode(image, np.ones((kernel_size, kernel_size), np.uint8))
mean_filtered = cv2.blur(image, (kernel_size, kernel_size))
median_filtered = cv2.medianBlur(image, kernel_size)
threshold_value = 127
_, binary_image = cv2.threshold(image, threshold_value, 255, cv2.THRESH_BINARY)
blurred_image = cv2.GaussianBlur(image, (5,5), 0)

cv2.imshow("Max Filter", max_filtered)
cv2.imshow("Min Filter", min_filtered)
cv2.imshow("Mean Filter", mean_filtered)
cv2.imshow("Median Filter", median_filtered)
cv2.imshow("Binary Thresholded Image", binary_image)
cv2.imshow("Blurred Image", blurred_image)
cv2.waitKey(0)
cv2.destroyAllWindows()

#log transformations
import cv2
import numpy as np
image = cv2.imread("car.jfif", cv2.IMREAD_GRAYSCALE)
c = 1
transformed_image = c * np.log1p(image)
transformed_image = cv2.normalize(transformed_image, None, 0, 255, cv2.NORM_MINMAX, dtype=cv2.CV_8U)
cv2.imshow("Original Image", image)
cv2.imshow("Log Transformed Image", transformed_image)
cv2.waitKey(0)
cv2.destroyAllWindows()


#edge detection
import cv2
image = cv2.imread("car.jfif")
gray_image = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

edges_sobel_x = cv2.Sobel(gray_image, cv2.CV_64F, 1, 0, ksize=3)
edges_sobel_y = cv2.Sobel(gray_image, cv2.CV_64F, 0, 1, ksize=3)
edges_sobel = cv2.magnitude(edges_sobel_x, edges_sobel_y)
edges_laplacian = cv2.Laplacian(gray_image, cv2.CV_64F)
edges_canny = cv2.Canny(gray_image, threshold1=100, threshold2=200) 

cv2.imshow('image', edges_canny)
cv2.imshow("Sobel Edges", edges_sobel)
cv2.imshow("Laplacian Edges", edges_laplacian)
cv2.waitKey(0)
cv2.destroyAllWindows()
